import random
import logging
import os

import telebot
import qrcode

import config


bot = telebot.TeleBot(config.TOKEN)
telebot.logger.setLevel(logging.DEBUG)
dir_pictures = '' # dir where pictures will be created


def log(message, handler):
    bot.send_message(config.CHANNEL, message)

    if handler == "text":
        bot.send_message(config.OWNER, f'[<a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>] {message.from_user.first_name} "{message.from_user.username}" {message.from_user.last_name}: {message.text}',
                        parse_mode='html', disable_notification=True)   
    elif handler == "sticker":
        bot.send_message(config.OWNER, f'[<a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>] {message.from_user.first_name} "{message.from_user.username}" {message.from_user.last_name}:', 
                        parse_mode='html', disable_notification=True)
        bot.send_sticker(config.OWNER, message.sticker.file_id, disable_notification=True)


def qr_gen(message, handler):
    log(message, handler)

    qr = qrcode.make(handler)
    name_qrcode_file = random.randrange(99)
    qr.save(f"{dir_pictures}/{name_qrcode_file}.png")
    qr_pic = open(f"{dir_pictures}/{name_qrcode_file}.png", 'rb')
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.send_photo(message.chat.id, qr_pic,
                    reply_to_message_id=message.message_id)
    os.remove(f'{dir_pictures}/{name_qrcode_file}.png')


@bot.message_handler(commands=['start'])
def start_hello(message):
    handler = "text"
    log(message, handler)

    if message.from_user.language_code == 'ru':
        bot.send_message(
                message.chat.id, f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ <a href="https://ru.wikipedia.org/wiki/QR-%D0%BA%D0%BE%D0%B4">QR-–∫–æ–¥</a>.', parse_mode='html')
    else:
        bot.send_message(
            message.chat.id, f'üëã Hey, {message.from_user.first_name}!\nThis bot converts text and location to <a href="https://en.wikipedia.org/wiki/QR_code">QR code</a>.', parse_mode='html')


@bot.message_handler(commands=['feedback'])
def leave_feedback(message):
    handler = "text"
    log(message, handler)

    if message.from_user.language_code == 'ru':
        bot.send_message(message.chat.id, 
                            'üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –í–∞—à–∏—Ö <b>–ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö</b> –∏–ª–∏ <b>–ø—Ä–æ–±–ª–µ–º–∞—Ö</b>, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.\n\n–ï—Å–ª–∏ –í—ã –∂–µ–ª–∞–µ—Ç–µ –¥–∏–∞–ª–æ–≥–∞ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ: @zweel.', parse_mode='html')
        bot.register_next_step_handler(message, get_feedback)
    else:
        bot.send_message(message.chat.id, 
                        "üí¨ Please tell me about your <b>suggestions</b> or <b>problems</b> that you encountered using the bot.\n\nUse /cancel to cancel this command.\n\nIf you need a dialogue with the developer, you can PM: @zweel. <i>(But I'm bad at English üôÇ)</i>.", parse_mode='html')
        bot.register_next_step_handler(message, get_feedback)

def get_feedback(message):
    if message.text == '/cancel':
        bot.send_message(message.chat.id, 'üëç')

    else:   
        bot.send_message(config.OWNER, f'uID: <a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>:', parse_mode='html', disable_notification=True)
        bot.forward_message(config.OWNER, message.chat.id, message.message_id)
        
        if message.from_user.language_code == 'ru':
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_to_message_id=message.message_id)
        else:
            bot.send_message(message.chat.id, 'Awesome! Your message has been sent.', reply_to_message_id=message.message_id)


@bot.message_handler(commands=['help'])
def msg_help(message):
    handler = "text"
    log(message, handler)

    if message.from_user.language_code == 'ru':
        bot.send_message(message.chat.id, 'ü§ñ –î–∞–Ω–Ω—ã–π –±–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç <b>—Ç–µ–∫—Å—Ç</b> –∏ <b>–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</b> –≤ <a href="https://ru.wikipedia.org/wiki/QR-%D0%BA%D0%BE%D0%B4">QR-–∫–æ–¥</a>. \n\n–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: \n‚Ä¢ <a href="https://github.com/eternnoir/pyTelegramBotAPI">pyTelegramBotApi</a> ‚Äî –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å <a href="https://core.telegram.org/bots/api">Telegram Bot API</a>.\n‚Ä¢ <a href="https://github.com/lincolnloop/python-qrcode">qrcode</a> ‚Äî –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤.\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n/feedback ‚Äî –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑—ä—è–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ.\n/about ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.', parse_mode="html", disable_web_page_preview=True)
    else:
        bot.send_message(message.chat.id, 'ü§ñ This bot converts <b>text</b> and <b>geolocation</b> to <a href="https://en.wikipedia.org/wiki/QR_code">QR code</a>.\n\nThe bot is written in Python and uses the following libraries:\n‚Ä¢ <a href="https://github.com/eternnoir/pyTelegramBotAPI">pyTelegramBotApi</a> ‚Äî for communication with the <a href="https://core.telegram.org/bots/api">Telegram Bot API</a>.\n‚Ä¢ <a href="https://github.com/lincolnloop/python-qrcode">qrcode</a> ‚Äî to create QR codes.\n\n<b>Commands:</b>\n/feedback ‚Äî leave feedback about the bot.\n/help ‚Äî get information about the bot.', parse_mode='html', disable_web_page_preview=True)


@bot.message_handler(content_types=['text'])
def qr_text(message):
    try:
        handler = "text"
        qr_gen(message, handler)
    except Exception as error:
        bot.send_message(message.chat.id, f"üòî Error: {error}")
        bot.send_message(config.OWNER, f"‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error}")


@bot.message_handler(content_types=['sticker'])
def qr_sticker(message):
    try:
        handler = 'sticker'
        qr_gen(message, handler)
    except Exception as error:
        bot.send_message(message.chat.id, f"üòî Error: {error}")
        bot.send_message(config.OWNER, f"‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error}")


@bot.message_handler(content_types=['location'])
def qr_location(message):
    try:
        handler = "location"
        qr_gen(message, handler)
    except Exception as error:
        bot.send_message(message.chat.id, f"üòî Error: {error}")
        bot.send_message(config.OWNER, f"‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error}")

@bot.message_handler(content_types=['photo', 'video', 'document', "audio"])
def unknown(message):
    bot.send_message(message.chat.id, 'ü§∑‚Äç‚ôÄÔ∏è', reply_to_message_id=message.message_id)


try:
    bot.polling(True)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:\n{e}")